import React, { useEffect } from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import {GameState} from '../App';

const Container = styled.div`
  width: 100vw;
  height: 100vh;
  padding: 20px;
  color: white;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
`;

const Header = styled.div`
  text-align: center;
  margin-top: 20px;
  margin-bottom: 30px;
`;

const Title = styled.h1`
  font-size: 32px;
  font-weight: bold;
  color: white;
  margin: 0;
`;

const Content = styled.div`
  flex: 1;
  margin-bottom: 20px;
  overflow-y: auto;
  padding-right: 10px;

  /* Custom scrollbar */
  &::-webkit-scrollbar {
    width: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
  }
`;

const SettingItem = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  padding: 15px;
  margin-bottom: 10px;
  backdrop-filter: blur(10px);
`;

const SettingLeft = styled.div`
  display: flex;
  align-items: center;
  flex: 1;
`;

const SettingIcon = styled.div`
  font-size: 24px;
  margin-right: 15px;
`;

const SettingInfo = styled.div`
  flex: 1;
`;

const SettingTitle = styled.div`
  font-size: 16px;
  font-weight: bold;
  color: white;
  margin-bottom: 2px;
`;

const SettingDescription = styled.div`
  font-size: 14px;
  color: white;
  opacity: 0.8;
`;

const SettingRight = styled.div`
  display: flex;
  align-items: flex-end;
`;

const StatValue = styled.div`
  font-size: 18px;
  font-weight: bold;
  color: white;
`;

const SectionHeader = styled.div`
  margin-top: 20px;
  margin-bottom: 10px;
`;

const SectionTitle = styled.h3`
  font-size: 18px;
  font-weight: bold;
  color: white;
  opacity: 0.9;
  margin: 0;
`;

const ActionButton = styled(motion.button)`
  margin-bottom: 10px;
  border-radius: 15px;
  overflow: hidden;
  border: none;
  cursor: pointer;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
`;

const ActionContent = styled.div<{ danger?: boolean }>`
  display: flex;
  align-items: center;
  padding: 15px;
  background: ${props => props.danger 
    ? 'linear-gradient(135deg, #FF6B6B, #FF8E8E)'
    : 'linear-gradient(135deg, #45B7D1, #67C9E1)'};
  color: white;
`;

const ActionIcon = styled.div`
  font-size: 24px;
  margin-right: 15px;
`;

const ActionText = styled.div`
  font-size: 16px;
  font-weight: bold;
  color: white;
`;

const BackButton = styled.button`
  background: linear-gradient(135deg, #4ECDC4, #6EE7DF);
  border: none;
  border-radius: 15px;
  padding: 15px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }
`;

const Switch = styled.div<{ enabled: boolean }>`
  width: 50px;
  height: 28px;
  border-radius: 14px;
  background: ${props => props.enabled ? '#4ECDC4' : '#767577'};
  position: relative;
  cursor: pointer;
  transition: background 0.3s ease;
`;

const SwitchThumb = styled.div<{ enabled: boolean }>`
  width: 24px;
  height: 24px;
  border-radius: 12px;
  background: white;
  position: absolute;
  top: 2px;
  left: ${props => props.enabled ? '24px' : '2px'};
  transition: left 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
`;

const ConfirmDialog = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const DialogContent = styled.div`
  background: linear-gradient(135deg, #FF6B6B, #FF8E8E);
  border-radius: 20px;
  padding: 30px;
  max-width: 90vw;
  width: 400px;
  color: white;
  text-align: center;
`;

const DialogTitle = styled.h3`
  margin: 0 0 15px 0;
  font-size: 20px;
`;

const DialogText = styled.p`
  margin: 0 0 25px 0;
  font-size: 16px;
  opacity: 0.9;
`;

const DialogButtons = styled.div`
  display: flex;
  gap: 15px;
`;

const DialogButton = styled.button<{ danger?: boolean }>`
  flex: 1;
  padding: 12px;
  border: none;
  border-radius: 10px;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  background: ${props => props.danger ? 'rgba(255, 255, 255, 0.9)' : 'rgba(255, 255, 255, 0.2)'};
  color: ${props => props.danger ? '#FF6B6B' : 'white'};
  transition: all 0.3s ease;

  &:hover {
    background: ${props => props.danger ? 'white' : 'rgba(255, 255, 255, 0.3)'};
  }
`;

interface SettingsScreenProps {
  gameState: GameState;
  onUpdateGameState: (updates: Partial<GameState>) => void;
  onBackToMenu: () => void;
}

const SettingsScreenWeb: React.FC<SettingsScreenProps> = ({
  gameState,
  onUpdateGameState,
  onBackToMenu,
}) => {
  const [showResetDialog, setShowResetDialog] = React.useState(false);

  useEffect(() => {
    // Setup Telegram WebApp buttons
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.BackButton.show();
      tg.BackButton.onClick(onBackToMenu);
      tg.MainButton.hide();
    }

    return () => {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.BackButton.hide();
      }
    };
  }, [onBackToMenu]);

  const handleSoundToggle = () => {
    onUpdateGameState({soundEnabled: !gameState.soundEnabled});
    
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }
  };

  const handleVibrationToggle = () => {
    onUpdateGameState({vibrationEnabled: !gameState.vibrationEnabled});
    
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }
  };

  const handleResetProgress = () => {
    setShowResetDialog(true);
  };

  const confirmReset = () => {
    onUpdateGameState({
      coins: 100,
      score: 0,
      highScore: 0,
      unlockedSkins: ['default'],
      currentSkin: 'default',
      unlockedFoods: ['hinkali'],
    });
    
    setShowResetDialog(false);
    
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      window.Telegram.WebApp.showAlert('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.');
    }
  };

  const cancelReset = () => {
    setShowResetDialog(false);
  };

  const handleAbout = () => {
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.showAlert(
        '–•–∏–Ω–∫–∞–ª—å–º–∞–Ω–∏—è v1.0.0\n\n–°–æ–±–∏—Ä–∞–π –∫–∞–≤–∫–∞–∑—Å–∫–∏–µ –±–ª—é–¥–∞ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–∏–º –ø–æ–≤–∞—Ä–æ–º!\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –∫ –∫–∞–≤–∫–∞–∑—Å–∫–æ–π –∫—É—Ö–Ω–µ ü•ü'
      );
    }
  };

  const renderSettingItem = (
    title: string,
    description: string,
    icon: string,
    rightComponent: React.ReactNode,
  ) => (
    <SettingItem>
      <SettingLeft>
        <SettingIcon>{icon}</SettingIcon>
        <SettingInfo>
          <SettingTitle>{title}</SettingTitle>
          <SettingDescription>{description}</SettingDescription>
        </SettingInfo>
      </SettingLeft>
      <SettingRight>{rightComponent}</SettingRight>
    </SettingItem>
  );

  return (
    <Container>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Header>
        <Title>–ù–ê–°–¢–†–û–ô–ö–ò</Title>
      </Header>

      <Content>
        {/* –ó–≤—É–∫ */}
        {renderSettingItem(
          '–ó–≤—É–∫',
          '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
          'üîä',
          <Switch enabled={gameState.soundEnabled} onClick={handleSoundToggle}>
            <SwitchThumb enabled={gameState.soundEnabled} />
          </Switch>
        )}

        {/* –í–∏–±—Ä–∞—Ü–∏—è */}
        {renderSettingItem(
          '–í–∏–±—Ä–∞—Ü–∏—è',
          '–í–∫–ª—é—á–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å–±–æ—Ä–µ –µ–¥—ã',
          'üì≥',
          <Switch enabled={gameState.vibrationEnabled} onClick={handleVibrationToggle}>
            <SwitchThumb enabled={gameState.vibrationEnabled} />
          </Switch>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <SectionHeader>
          <SectionTitle>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</SectionTitle>
        </SectionHeader>

        {renderSettingItem(
          '–ú–æ–Ω–µ—Ç—ã',
          `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${gameState.coins}`,
          'ü™ô',
          <StatValue>{gameState.coins}</StatValue>
        )}

        {renderSettingItem(
          '–†–µ–∫–æ—Ä–¥',
          `–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${gameState.highScore}`,
          'üèÜ',
          <StatValue>{gameState.highScore}</StatValue>
        )}

        {renderSettingItem(
          '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã',
          `${gameState.unlockedSkins.length} –∏–∑ 5`,
          'üë§',
          <StatValue>{gameState.unlockedSkins.length}/5</StatValue>
        )}

        {renderSettingItem(
          '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –µ–¥–∞',
          `${gameState.unlockedFoods.length} –∏–∑ 4`,
          'üçΩÔ∏è',
          <StatValue>{gameState.unlockedFoods.length}/4</StatValue>
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <SectionHeader>
          <SectionTitle>–î–ï–ô–°–¢–í–ò–Ø</SectionTitle>
        </SectionHeader>

        <ActionButton
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleResetProgress}>
          <ActionContent danger>
            <ActionIcon>üîÑ</ActionIcon>
            <ActionText>–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</ActionText>
          </ActionContent>
        </ActionButton>

        <ActionButton
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={handleAbout}>
          <ActionContent>
            <ActionIcon>‚ÑπÔ∏è</ActionIcon>
            <ActionText>–û –∏–≥—Ä–µ</ActionText>
          </ActionContent>
        </ActionButton>
      </Content>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <BackButton onClick={onBackToMenu}>
        –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
      </BackButton>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ */}
      {showResetDialog && (
        <ConfirmDialog
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}>
          <DialogContent>
            <DialogTitle>–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</DialogTitle>
            <DialogText>
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
            </DialogText>
            <DialogButtons>
              <DialogButton onClick={cancelReset}>
                –û—Ç–º–µ–Ω–∞
              </DialogButton>
              <DialogButton danger onClick={confirmReset}>
                –°–±—Ä–æ—Å–∏—Ç—å
              </DialogButton>
            </DialogButtons>
          </DialogContent>
        </ConfirmDialog>
      )}
    </Container>
  );
};

export default SettingsScreenWeb;