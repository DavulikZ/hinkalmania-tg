import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Switch,
  Alert,
  ScrollView,
} from 'react-native';
import LinearGradient from 'react-native-linear-gradient';
import {GameState} from '../App';

interface SettingsScreenProps {
  gameState: GameState;
  onUpdateGameState: (updates: Partial<GameState>) => void;
  onBackToMenu: () => void;
}

const SettingsScreen: React.FC<SettingsScreenProps> = ({
  gameState,
  onUpdateGameState,
  onBackToMenu,
}) => {
  const handleSoundToggle = (value: boolean) => {
    onUpdateGameState({soundEnabled: value});
  };

  const handleVibrationToggle = (value: boolean) => {
    onUpdateGameState({vibrationEnabled: value});
  };

  const handleResetProgress = () => {
    Alert.alert(
      '–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      [
        {text: '–û—Ç–º–µ–Ω–∞', style: 'cancel'},
        {
          text: '–°–±—Ä–æ—Å–∏—Ç—å',
          style: 'destructive',
          onPress: () => {
            onUpdateGameState({
              coins: 100,
              score: 0,
              highScore: 0,
              unlockedSkins: ['default'],
              currentSkin: 'default',
              unlockedFoods: ['hinkali'],
            });
            Alert.alert('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω', '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.');
          },
        },
      ],
    );
  };

  const handleAbout = () => {
    Alert.alert(
      '–û –∏–≥—Ä–µ',
      '–•–∏–Ω–∫–∞–ª—å–º–∞–Ω–∏—è v1.0.0\n\n–°–æ–±–∏—Ä–∞–π –∫–∞–≤–∫–∞–∑—Å–∫–∏–µ –±–ª—é–¥–∞ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–∏–º –ø–æ–≤–∞—Ä–æ–º!\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –∫ –∫–∞–≤–∫–∞–∑—Å–∫–æ–π –∫—É—Ö–Ω–µ ü•ü',
      [{text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default'}],
    );
  };

  const renderSettingItem = (
    title: string,
    description: string,
    icon: string,
    rightComponent: React.ReactNode,
  ) => (
    <View style={styles.settingItem}>
      <View style={styles.settingLeft}>
        <Text style={styles.settingIcon}>{icon}</Text>
        <View style={styles.settingInfo}>
          <Text style={styles.settingTitle}>{title}</Text>
          <Text style={styles.settingDescription}>{description}</Text>
        </View>
      </View>
      <View style={styles.settingRight}>{rightComponent}</View>
    </View>
  );

  return (
    <View style={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View style={styles.header}>
        <Text style={styles.title}>–ù–ê–°–¢–†–û–ô–ö–ò</Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* –ó–≤—É–∫ */}
        {renderSettingItem(
          '–ó–≤—É–∫',
          '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
          'üîä',
          <Switch
            value={gameState.soundEnabled}
            onValueChange={handleSoundToggle}
            trackColor={{false: '#767577', true: '#4ECDC4'}}
            thumbColor={gameState.soundEnabled ? '#FFFFFF' : '#f4f3f4'}
          />,
        )}

        {/* –í–∏–±—Ä–∞—Ü–∏—è */}
        {renderSettingItem(
          '–í–∏–±—Ä–∞—Ü–∏—è',
          '–í–∫–ª—é—á–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é –ø—Ä–∏ —Å–±–æ—Ä–µ –µ–¥—ã',
          'üì≥',
          <Switch
            value={gameState.vibrationEnabled}
            onValueChange={handleVibrationToggle}
            trackColor={{false: '#767577', true: '#4ECDC4'}}
            thumbColor={gameState.vibrationEnabled ? '#FFFFFF' : '#f4f3f4'}
          />,
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</Text>
        </View>

        {renderSettingItem(
          '–ú–æ–Ω–µ—Ç—ã',
          `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${gameState.coins}`,
          'ü™ô',
          <Text style={styles.statValue}>{gameState.coins}</Text>,
        )}

        {renderSettingItem(
          '–†–µ–∫–æ—Ä–¥',
          `–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${gameState.highScore}`,
          'üèÜ',
          <Text style={styles.statValue}>{gameState.highScore}</Text>,
        )}

        {renderSettingItem(
          '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã',
          `${gameState.unlockedSkins.length} –∏–∑ 5`,
          'üë§',
          <Text style={styles.statValue}>{gameState.unlockedSkins.length}/5</Text>,
        )}

        {renderSettingItem(
          '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –µ–¥–∞',
          `${gameState.unlockedFoods.length} –∏–∑ 4`,
          'üçΩÔ∏è',
          <Text style={styles.statValue}>{gameState.unlockedFoods.length}/4</Text>,
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>–î–ï–ô–°–¢–í–ò–Ø</Text>
        </View>

        <TouchableOpacity style={styles.actionButton} onPress={handleResetProgress}>
          <LinearGradient
            colors={['#FF6B6B', '#FF8E8E']}
            style={styles.actionGradient}>
            <Text style={styles.actionIcon}>üîÑ</Text>
            <Text style={styles.actionText}>–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</Text>
          </LinearGradient>
        </TouchableOpacity>

        <TouchableOpacity style={styles.actionButton} onPress={handleAbout}>
          <LinearGradient
            colors={['#45B7D1', '#67C9E1']}
            style={styles.actionGradient}>
            <Text style={styles.actionIcon}>‚ÑπÔ∏è</Text>
            <Text style={styles.actionText}>–û –∏–≥—Ä–µ</Text>
          </LinearGradient>
        </TouchableOpacity>
      </ScrollView>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <TouchableOpacity style={styles.backButton} onPress={onBackToMenu}>
        <LinearGradient
          colors={['#4ECDC4', '#6EE7DF']}
          style={styles.buttonGradient}>
          <Text style={styles.buttonText}>–ù–ê–ó–ê–î –í –ú–ï–ù–Æ</Text>
        </LinearGradient>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  header: {
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 30,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  content: {
    flex: 1,
    marginBottom: 20,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 15,
    padding: 15,
    marginBottom: 10,
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  settingIcon: {
    fontSize: 24,
    marginRight: 15,
  },
  settingInfo: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  settingDescription: {
    fontSize: 14,
    color: '#FFFFFF',
    opacity: 0.8,
  },
  settingRight: {
    alignItems: 'flex-end',
  },
  statValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  sectionHeader: {
    marginTop: 20,
    marginBottom: 10,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    opacity: 0.9,
  },
  actionButton: {
    marginBottom: 10,
    borderRadius: 15,
    overflow: 'hidden',
  },
  actionGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
  },
  actionIcon: {
    fontSize: 24,
    marginRight: 15,
  },
  actionText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  backButton: {
    borderRadius: 15,
    overflow: 'hidden',
  },
  buttonGradient: {
    paddingVertical: 15,
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
});

export default SettingsScreen; 