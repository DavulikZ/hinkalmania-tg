import React, {useState, useEffect} from 'react';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import {GameState} from '../App';
import { checkAchievements } from '../constants/achievements';

const Container = styled.div`
  width: 100vw;
  height: 100vh;
  padding: 20px;
  color: white;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
`;

const Header = styled.div`
  text-align: center;
  margin-top: 20px;
  margin-bottom: 30px;
`;

const Title = styled.h1`
  font-size: 32px;
  font-weight: bold;
  color: white;
  margin-bottom: 10px;
  margin: 0;
`;

const Subtitle = styled.div`
  font-size: 18px;
  color: white;
  opacity: 0.9;
  margin-top: 10px;
`;

const ProfileSection = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 15px;
  margin-bottom: 20px;
  padding: 15px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 15px;
  backdrop-filter: blur(10px);
`;

const ProfileAvatar = styled.div`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: linear-gradient(135deg, #FF6B6B, #4ECDC4);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  font-weight: bold;
`;

const ProfileInfo = styled.div`
  text-align: left;
`;

const ProfileName = styled.div`
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 5px;
`;

const ProfileStats = styled.div`
  font-size: 14px;
  opacity: 0.8;
`;

const StatsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 10px;
  margin-bottom: 20px;
`;

const StatCard = styled.div`
  background: rgba(255, 255, 255, 0.2);
  border-radius: 10px;
  padding: 15px;
  text-align: center;
  backdrop-filter: blur(10px);
`;

const StatValue = styled.div`
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 5px;
`;

const StatLabel = styled.div`
  font-size: 12px;
  opacity: 0.8;
`;

const CategoryContainer = styled.div`
  display: flex;
  margin-bottom: 20px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 15px;
  padding: 5px;
  backdrop-filter: blur(10px);
`;

const CategoryButton = styled.button<{ active?: boolean }>`
  flex: 1;
  padding: 12px;
  text-align: center;
  border-radius: 10px;
  background: ${props => props.active ? 'rgba(255, 255, 255, 0.3)' : 'transparent'};
  border: none;
  color: white;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: rgba(255, 255, 255, 0.2);
  }
`;

const ItemsContainer = styled.div`
  flex: 1;
  margin-bottom: 20px;
  overflow-y: auto;
  padding-right: 10px;

  /* Custom scrollbar */
  &::-webkit-scrollbar {
    width: 6px;
  }
  
  &::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }
  
  &::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
  }
`;

const ShopItem = styled(motion.div)<{ selected?: boolean; unlocked?: boolean }>`
  margin-bottom: 15px;
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  border: ${props => props.selected ? '3px solid #FFD700' : 'none'};
  background: ${props => props.unlocked 
    ? 'linear-gradient(135deg, #4ECDC4, #6EE7DF)'
    : 'linear-gradient(135deg, #FF6B6B, #FF8E8E)'};
`;

const ItemContent = styled.div`
  padding: 15px;
`;

const ItemHeader = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 10px;
`;

const ItemEmoji = styled.div`
  font-size: 40px;
  margin-right: 15px;
`;

const ItemInfo = styled.div`
  flex: 1;
`;

const ItemName = styled.div`
  font-size: 18px;
  font-weight: bold;
  color: white;
  margin-bottom: 5px;
`;

const ItemDescription = styled.div`
  font-size: 14px;
  color: white;
  opacity: 0.9;
`;

const ItemFooter = styled.div`
  display: flex;
  justify-content: flex-end;
`;

const PriceText = styled.div`
  font-size: 18px;
  font-weight: bold;
  color: white;
`;

const UnlockedText = styled.div`
  font-size: 16px;
  font-weight: bold;
  color: white;
  opacity: 0.8;
`;

const BackButton = styled.button`
  background: linear-gradient(135deg, #4ECDC4, #6EE7DF);
  border: none;
  border-radius: 15px;
  padding: 15px;
  color: white;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }
`;

const ConfirmDialog = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
`;

const DialogContent = styled.div`
  background: linear-gradient(135deg, #FF6B6B, #FF8E8E);
  border-radius: 20px;
  padding: 30px;
  max-width: 90vw;
  width: 400px;
  color: white;
  text-align: center;
`;

const DialogTitle = styled.h3`
  margin: 0 0 15px 0;
  font-size: 20px;
`;

const DialogText = styled.p`
  margin: 0 0 25px 0;
  font-size: 16px;
  opacity: 0.9;
`;

const DialogButtons = styled.div`
  display: flex;
  gap: 15px;
`;

const DialogButton = styled.button<{ primary?: boolean }>`
  flex: 1;
  padding: 12px;
  border: none;
  border-radius: 10px;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  background: ${props => props.primary ? 'rgba(255, 255, 255, 0.9)' : 'rgba(255, 255, 255, 0.2)'};
  color: ${props => props.primary ? '#FF6B6B' : 'white'};
  transition: all 0.3s ease;

  &:hover {
    background: ${props => props.primary ? 'white' : 'rgba(255, 255, 255, 0.3)'};
  }
`;

interface ShopScreenProps {
  gameState: GameState;
  onUpdateGameState: (updates: Partial<GameState>) => void;
  onBackToMenu: () => void;
}

interface ShopItemType {
  id: string;
  name: string;
  description: string;
  price: number;
  type: 'skin' | 'food';
  emoji: string;
  image?: string;
  isUnlocked: boolean;
  isSelected: boolean;
}

const ShopScreenWeb: React.FC<ShopScreenProps> = ({
  gameState,
  onUpdateGameState,
  onBackToMenu,
}) => {
  const [selectedCategory, setSelectedCategory] = useState<'skins' | 'food'>('skins');
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [selectedItem, setSelectedItem] = useState<ShopItemType | null>(null);

  useEffect(() => {
    // Setup Telegram WebApp buttons
    if (window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      tg.BackButton.show();
      tg.BackButton.onClick(onBackToMenu);
      tg.MainButton.hide();
    }

    return () => {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.BackButton.hide();
      }
    };
  }, [onBackToMenu]);

  const skinItems: ShopItemType[] = [
    {
      id: 'default',
      name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–≤–∫–∞–∑–µ—Ü –≤ –ø–∞–ø–∞—Ö–µ, –ø–æ–≤–µ—Ä–Ω—É—Ç —Å–ø–∏–Ω–æ–π',
      price: 0,
      type: 'skin',
      emoji: 'üö∂üèΩ‚Äç‚ôÇÔ∏è',
      image: '/images/characters/caucasian-default.png',
      isUnlocked: gameState.unlockedSkins.includes('default'),
      isSelected: gameState.currentSkin === 'default',
    },
    {
      id: 'chef',
      name: '–ü–æ–≤–∞—Ä-–∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–ö–∞–≤–∫–∞–∑–µ—Ü –≤ –ø–æ–≤–∞—Ä—Å–∫–æ–º –∫–æ–ª–ø–∞–∫–µ',
      price: 200,
      type: 'skin',
      emoji: 'üë®‚Äçüç≥',
      image: '/images/characters/caucasian-chef.png',
      isUnlocked: gameState.unlockedSkins.includes('chef'),
      isSelected: gameState.currentSkin === 'chef',
    },
    {
      id: 'warrior',
      name: '–í–æ–∏–Ω-–∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–ö–∞–≤–∫–∞–∑–µ—Ü —Å —Å–∞–±–ª–µ–π –∏ –∫–∏–Ω–∂–∞–ª–æ–º',
      price: 500,
      type: 'skin',
      emoji: '‚öîÔ∏è',
      image: '/images/characters/caucasian-warrior.png',
      isUnlocked: gameState.unlockedSkins.includes('warrior'),
      isSelected: gameState.currentSkin === 'warrior',
    },
    {
      id: 'elder',
      name: '–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞-–∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–ö–∞–≤–∫–∞–∑–µ—Ü —Å –¥–ª–∏–Ω–Ω–æ–π –±–æ—Ä–æ–¥–æ–π',
      price: 1000,
      type: 'skin',
      emoji: 'üë¥',
      image: '/images/characters/caucasian-elder.png',
      isUnlocked: gameState.unlockedSkins.includes('elder'),
      isSelected: gameState.currentSkin === 'elder',
    },
    {
      id: 'dancer',
      name: '–¢–∞–Ω—Ü–æ—Ä-–∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–ö–∞–≤–∫–∞–∑–µ—Ü –≤ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–º –∫–æ—Å—Ç—é–º–µ',
      price: 1500,
      type: 'skin',
      emoji: 'üíÉ',
      image: '/images/characters/caucasian-dancer.png',
      isUnlocked: gameState.unlockedSkins.includes('dancer'),
      isSelected: gameState.currentSkin === 'dancer',
    },
    {
      id: 'hunter',
      name: '–û—Ö–æ—Ç–Ω–∏–∫-–∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–ö–∞–≤–∫–∞–∑–µ—Ü —Å —Ä—É–∂—å–µ–º',
      price: 2500,
      type: 'skin',
      emoji: 'üèπ',
      image: '/images/characters/caucasian-hunter.png',
      isUnlocked: gameState.unlockedSkins.includes('hunter'),
      isSelected: gameState.currentSkin === 'hunter',
    },
    {
      id: 'shepherd',
      name: '–ü–∞—Å—Ç—É—Ö-–∫–∞–≤–∫–∞–∑–µ—Ü',
      description: '–ö–∞–≤–∫–∞–∑–µ—Ü —Å –ø–æ—Å–æ—Ö–æ–º',
      price: 3500,
      type: 'skin',
      emoji: 'üêë',
      image: '/images/characters/caucasian-shepherd.png',
      isUnlocked: gameState.unlockedSkins.includes('shepherd'),
      isSelected: gameState.currentSkin === 'shepherd',
    },
  ];

  const foodItems: ShopItemType[] = [
    {
      id: 'hinkali',
      name: '–•–∏–Ω–∫–∞–ª–∏',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ —Ö–∏–Ω–∫–∞–ª–∏ —Å –º—è—Å–æ–º',
      price: 0,
      type: 'food',
      emoji: 'ü¶™',
      isUnlocked: gameState.unlockedFoods.includes('hinkali'),
      isSelected: false,
    },
    {
      id: 'harcho',
      name: '–•–∞—Ä—á–æ',
      description: '–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π —Å—É–ø —Ö–∞—Ä—á–æ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π',
      price: 100,
      type: 'food',
      emoji: 'üç≤',
      isUnlocked: gameState.unlockedFoods.includes('harcho'),
      isSelected: false,
    },
    {
      id: 'adjarski',
      name: '–•–∞—á–∞–ø—É—Ä–∏ –ø–æ-–∞–¥–∂–∞—Ä—Å–∫–∏',
      description: '–•–∞—á–∞–ø—É—Ä–∏ –≤ —Ñ–æ—Ä–º–µ –ª–æ–¥–æ—á–∫–∏ —Å —è–π—Ü–æ–º',
      price: 250,
      type: 'food',
      emoji: 'ü•ß',
      isUnlocked: gameState.unlockedFoods.includes('adjarski'),
      isSelected: false,
    },
    {
      id: 'megruli',
      name: '–•–∞—á–∞–ø—É—Ä–∏ –ø–æ-–º–µ–≥—Ä–µ–ª—å—Å–∫–∏',
      description: '–•–∞—á–∞–ø—É—Ä–∏ —Å –¥–≤–æ–π–Ω—ã–º —Å–ª–æ–µ–º —Å—ã—Ä–∞',
      price: 400,
      type: 'food',
      emoji: 'üçûüçû',
      isUnlocked: gameState.unlockedFoods.includes('megruli'),
      isSelected: false,
    },
    {
      id: 'lobio',
      name: '–õ–æ–±–∏–æ',
      description: '–ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ –±–ª—é–¥–æ –∏–∑ —Ñ–∞—Å–æ–ª–∏',
      price: 600,
      type: 'food',
      emoji: 'ü´ò',
      isUnlocked: gameState.unlockedFoods.includes('lobio'),
      isSelected: false,
    },
    {
      id: 'satsivi',
      name: '–°–∞—Ü–∏–≤–∏',
      description: '–ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ –±–ª—é–¥–æ –∏–∑ –∏–Ω–¥–µ–π–∫–∏ —Å –æ—Ä–µ—Ö–æ–≤—ã–º —Å–æ—É—Å–æ–º',
      price: 800,
      type: 'food',
      emoji: 'ü¶É',
      isUnlocked: gameState.unlockedFoods.includes('satsivi'),
      isSelected: false,
    },
    {
      id: 'chakapuli',
      name: '–ß–∞–∫–∞–ø—É–ª–∏',
      description: '–ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ –±–ª—é–¥–æ –∏–∑ –±–∞—Ä–∞–Ω–∏–Ω—ã —Å —Ç—Ä–∞–≤–∞–º–∏',
      price: 1200,
      type: 'food',
      emoji: 'üçñ',
      isUnlocked: gameState.unlockedFoods.includes('chakapuli'),
      isSelected: false,
    },
  ];

  const handleItemClick = (item: ShopItemType) => {
    if (item.isUnlocked) {
      if (item.type === 'skin') {
        onUpdateGameState({currentSkin: item.id});
        
        // Show success notification
        if (window.Telegram?.WebApp) {
          window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
          window.Telegram.WebApp.showAlert(`–°–∫–∏–Ω "${item.name}" –≤—ã–±—Ä–∞–Ω!`);
        }
      }
      return;
    }

    if (gameState.coins < item.price) {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('error');
        window.Telegram.WebApp.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç –≤ –∏–≥—Ä–µ.');
      }
      return;
    }

    setSelectedItem(item);
    setShowConfirmDialog(true);
  };

  const confirmPurchase = () => {
    if (!selectedItem) return;

    const newCoins = gameState.coins - selectedItem.price;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É
    const purchaseExperience = 25; // 25 –æ–ø—ã—Ç–∞ –∑–∞ –ø–æ–∫—É–ø–∫—É
    const newExperience = gameState.experience + purchaseExperience;
    const newLevel = Math.floor(newExperience / 100) + 1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    const newAchievements = checkAchievements({
      ...gameState,
      coins: newCoins,
      experience: newExperience,
      level: newLevel,
    });
    
    if (selectedItem.type === 'skin') {
      const newUnlockedSkins = [...gameState.unlockedSkins, selectedItem.id];
      onUpdateGameState({
        coins: newCoins,
        unlockedSkins: newUnlockedSkins,
        currentSkin: selectedItem.id,
        experience: newExperience,
        level: newLevel,
        achievements: [...gameState.achievements, ...newAchievements],
      });
    } else {
      const newUnlockedFoods = [...gameState.unlockedFoods, selectedItem.id];
      onUpdateGameState({
        coins: newCoins,
        unlockedFoods: newUnlockedFoods,
        experience: newExperience,
        level: newLevel,
        achievements: [...gameState.achievements, ...newAchievements],
      });
    }
    
    setShowConfirmDialog(false);
    setSelectedItem(null);

    // Show success notification
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      window.Telegram.WebApp.showAlert(`"${selectedItem.name}" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! +25 –æ–ø—ã—Ç–∞!`);
    }
  };

  const cancelPurchase = () => {
    setShowConfirmDialog(false);
    setSelectedItem(null);
  };

  const renderShopItem = (item: ShopItemType) => (
    <ShopItem
      key={item.id}
      selected={item.isSelected}
      unlocked={item.isUnlocked}
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      onClick={() => handleItemClick(item)}>
      <ItemContent>
        <ItemHeader>
          {item.type === 'skin' && item.image ? (
            <ItemEmoji>
              <img 
                src={item.image} 
                alt={item.name}
                style={{ width: '40px', height: '40px', objectFit: 'contain' }}
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.style.display = 'none';
                  const fallback = document.createElement('div');
                  fallback.textContent = item.emoji;
                  fallback.style.fontSize = '40px';
                  target.parentNode?.appendChild(fallback);
                }}
              />
            </ItemEmoji>
          ) : (
            <ItemEmoji>{item.emoji}</ItemEmoji>
          )}
          <ItemInfo>
            <ItemName>{item.name}</ItemName>
            <ItemDescription>{item.description}</ItemDescription>
          </ItemInfo>
        </ItemHeader>
        
        <ItemFooter>
          {item.isUnlocked ? (
            <UnlockedText>
              {item.type === 'skin' && item.isSelected ? '–í–´–ë–†–ê–ù' : '–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù'}
            </UnlockedText>
          ) : (
            <PriceText>ü™ô {item.price}</PriceText>
          )}
        </ItemFooter>
      </ItemContent>
    </ShopItem>
  );

  return (
    <Container>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Header>
        <Title>–ú–ê–ì–ê–ó–ò–ù</Title>
        <Subtitle>ü™ô {gameState.coins} –º–æ–Ω–µ—Ç</Subtitle>
      </Header>

      {/* –ü—Ä–æ—Ñ–∏–ª—å Telegram */}
      <ProfileSection>
        <ProfileAvatar>
          {window.Telegram?.WebApp?.initDataUnsafe?.user?.first_name?.charAt(0) || 'üë§'}
        </ProfileAvatar>
        <ProfileInfo>
          <ProfileName>
            {window.Telegram?.WebApp?.initDataUnsafe?.user?.first_name || '–ò–≥—Ä–æ–∫'}
          </ProfileName>
          <ProfileStats>
            –£—Ä–æ–≤–µ–Ω—å {gameState.level} ‚Ä¢ {gameState.achievements.length} –∞—á–∏–≤–æ–∫
          </ProfileStats>
        </ProfileInfo>
      </ProfileSection>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <StatsGrid>
        <StatCard>
          <StatValue>‚≠ê {gameState.level}</StatValue>
          <StatLabel>–£—Ä–æ–≤–µ–Ω—å</StatLabel>
        </StatCard>
        <StatCard>
          <StatValue>üéØ {gameState.totalGamesPlayed}</StatValue>
          <StatLabel>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ</StatLabel>
        </StatCard>
        <StatCard>
          <StatValue>üèÜ {gameState.highScore}</StatValue>
          <StatLabel>–†–µ–∫–æ—Ä–¥</StatLabel>
        </StatCard>
        <StatCard>
          <StatValue>üèÖ {gameState.achievements.length}</StatValue>
          <StatLabel>–ê—á–∏–≤–∫–∏</StatLabel>
        </StatCard>
      </StatsGrid>

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <CategoryContainer>
        <CategoryButton
          active={selectedCategory === 'skins'}
          onClick={() => setSelectedCategory('skins')}>
          –°–∫–∏–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        </CategoryButton>
        
        <CategoryButton
          active={selectedCategory === 'food'}
          onClick={() => setSelectedCategory('food')}>
          –í–∏–¥—ã –µ–¥—ã
        </CategoryButton>
      </CategoryContainer>

      {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <ItemsContainer>
        {selectedCategory === 'skins'
          ? skinItems.map(renderShopItem)
          : foodItems.map(renderShopItem)}
      </ItemsContainer>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <BackButton onClick={onBackToMenu}>
        –ù–ê–ó–ê–î –í –ú–ï–ù–Æ
      </BackButton>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ */}
      {showConfirmDialog && selectedItem && (
        <ConfirmDialog
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}>
          <DialogContent>
            <DialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</DialogTitle>
            <DialogText>
              –ö—É–ø–∏—Ç—å "{selectedItem.name}" –∑–∞ {selectedItem.price} –º–æ–Ω–µ—Ç?
            </DialogText>
            <DialogButtons>
              <DialogButton onClick={cancelPurchase}>
                –û—Ç–º–µ–Ω–∞
              </DialogButton>
              <DialogButton primary onClick={confirmPurchase}>
                –ö—É–ø–∏—Ç—å
              </DialogButton>
            </DialogButtons>
          </DialogContent>
        </ConfirmDialog>
      )}
    </Container>
  );
};

export default ShopScreenWeb;